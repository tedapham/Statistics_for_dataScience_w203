install_github("statsWithR/statsr"
)
install_github("StatsWithR/statsr")
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
samp1 <- ames %>%
sample_n(size = 50)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
samp1 <- ames %>%
sample_n(size = 50)
samp1 %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
# type your code for the Exercise here, and Run Document
hist(samp1)
# type your code for the Exercise here, and Run Document
samp1
hist(samp1$area)
hist(samp1$area,bin=20)
hist(samp1$area,breaks = 20)
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
help("rep_sample_n")
# type your code for the Exercise here, and Run Document
ames %->%
rep_sample_n(ames,10,reps = 25)
# type your code for the Exercise here, and Run Document
rep_sample_n(ames,10,reps = 25)
# type your code for the Exercise here, and Run Document
table25 = rep_sample_n(ames,10,reps = 25)
# type your code for the Exercise here, and Run Document
table25 = rep_sample_n(ames,10,reps = 25)
table25
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
samp1 %->%
summarise(mu_sample = mean(area), pop_med_s = median(area),
sigma_sample = sd(area), pop_iqr_s = IQR(area),
pop_min_s = min(area), pop_max_s = max(area),
pop_q1_s = quantile(area,0.25),
pop_q3_s = quantile(area,0.75))
samp1 %>%
summarise(mu_sample = mean(area), pop_med_s = median(area),
sigma_sample = sd(area), pop_iqr_s = IQR(area),
pop_min_s = min(area), pop_max_s = max(area),
pop_q1_s = quantile(area,0.25),
pop_q3_s = quantile(area,0.75))
count(sample_means50)
sample_mean50 %>%
summerise(x_bar_mean = mean(area))
# type your code for the Exercise here, and Run Document
count(sample_means50)
sample_mean50 %>%
summerise(x_bar_mean = mean(area))
# type your code for the Exercise here, and Run Document
count(sample_means50)
sample_means50 %>%
summerise(x_bar_mean = mean(area))
sample_means50 %>%
summarise(x_bar_mean = mean(area))
# type your code for the Exercise here, and Run Document
count(sample_means50)
sample_means50 %>%
summarise(x_bar_mean = mean(area))
# type your code for the Exercise here, and Run Document
count(sample_means50)
sample_means50
sample_means50 %>%
summarise(x_bar_mean = mean(area))
# type your code for the Exercise here, and Run Document
count(sample_means50)
mean(sample_means50)
# type your code for the Exercise here, and Run Document
count(sample_means50)
type(sample_means50)
# type your code for the Exercise here, and Run Document
count(sample_means50)
mean(sample_means50$x_bar)
ggplot(data = sample_means50, aes(x = x_bar)) + geom_histogram(bindwidth = 50)
ggplot(data = sample_means50, aes(x = x_bar)) + geom_histogram(binwidth = 50)
ggplot(data = sample_means50, aes(x = x_bar)) + geom_histogram(binwidth = 5)
# type your code for the Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for the Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 40)
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
# type your code for the Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 40)
# type your code for the Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
sample_means_small
# type your code for Question 3 here, and Run Document
count(sample_means_small)
# type your code for Question 3 here, and Run Document
count(sample_means_small)
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 1500, replace = TRUE) %>%
summarise(x_bar = mean(price))
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 1500, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 100)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 100)
price_means50
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 100)
mean(price_means50)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 100)
mean(price_means50$x_bar)
# type your code for this Exercise here, and Run Document
price_means50 <- ames %>%
rep_sample_n(size = 150, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data = price_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 100)
mean(price_means50$x_bar)
pt(0.05)
pt(0.05,99)
help(pt)
qt(0.05)
qt(0.05,99)
pt(0.96,99)
qt(0.05,99)
qt(0.05,99)
qt(1.769,99)
pt(1.769,99)
help(t.test)
install.packages('ISLR')
View(toss10)
View(toss10)
clear
clear all()
rm(list = ls())
clear
clr
clear
cat("\014")
x = c(2,7,5)
x
y = seq(from=4,length=3,by=3)
y
x+y
x/y
x[2:3]
z=matrix(seq(1,12),4,3)
z
z
z[3:4,2:3]
dim(z)
ls()
rm(y)
ls()
rm(ls())
rm(list=ls())
ls()
ls()
x = seq(-pi, pi, length=50)
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
?contour
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
opar <- par(mfrow = c(2, 2), mar = rep(0, 4))
for(f in pi^(0:3))
contour(cos(r^2)*exp(-r/f),
drawlabels = FALSE, axes = FALSE, frame = TRUE)
?contour
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
?outer
x = 1:9;
names(x) = x
x
x %o% x
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
q;
x = seq(-pi,pi,length=50)
y = x
f = outer(x,y,function(x,y) cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevel=45,add=T)
f = outer(x,y,function(x,y) x^2 + y^2)
contour(x,y,f)
x = seq(-10,10,length=50)
y = x
f = outer(x,y,function(x,y) x^2 + y^2)
contour(x,y,f)
f = outer(x,y,function(x,y) x + y)
contour(x,y,f)
?contour
x = seq(0,10,length=50)
x = seq(0,10,length=50)
y = x
f = outer(x,y,function(x,y) x + y)
contour(x,y,f)
library(ISLR)
Auto=read.table('Auto.data')
Auto=read.table("Auto.data")
Auto
auto = Auto
fix(auto)
?fix
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x=matrix(c(1,2,3,4),2,2)
matrix(c(1,2,3,4),2,2,byrow=TRUE)
sqrt(x)
x^2
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y")
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
x=seq(1,10)
x
x=1:10
x
x=seq(-pi,pi,length=50)
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
A=matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
Auto=read.table("Auto.data")
fix(Auto)
install.packages('XQuartz')
dim(Auto)
Auto[1:4,]
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
plot(cylinders, mpg)
cylinders=as.factor(cylinders)
cylinders=as.factor(cylinders)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T,horizontal=T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg,col=2)
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(Auto)
summary(mpg)
pairs(ames)
names(ames)
pairs(~ Order + Heating + Yr.Sold + Fence, ames)
rm(list=ls())
library(car)
library(lmtest)
install.packages("lmtest")
install.packages("sandwich")
library(sandwich)
library(car)
library(lmtest)
library(sandwich)
baby_bNaOmit <- na.omit(baby_b)
baby_gNaOmit <- na.omit(baby_g)
clear(ls=list())
rm(ls=list())
setwd("~/Documents/Berkeley Data Science/W203 Statistics/203hws/Lab_4")
rm(list=ls())
load("bwght_w203.RData")
desc
hist(data$npvis)
hist(log(data$npvis))
